const devOpsGraph = {
  groups: [
    {
      id: 100,
      label: 'Qualidade do Código',
      color: '#AC92EB',
    },
    {
      id: 200,
      label: 'Configuração como código',
      color: '#4FC1E8',
    },
    {
      id: 300,
      label: 'Gestão dos Builds',
      color: '#A0D568',
    },
    {
      id: 400,
      label: 'Gestão de Testes',
      color: '#FFCE54',
    },
    {
      id: 500,
      label: 'Testes de Carga',
      color: '#ED5564',
    },
    {
      id: 600,
      label: 'Gestão de Configuração',
      color: '#FF0000',
    },
    {
      id: 700,
      label: 'Gestão de Release',
      color: '#00FF00',
    },
    {
      id: 800,
      label: 'Monitoração de Aplicações',
      color: '#0000FF',
    },
  ],
  nodes: [
    {
      id: 101,
      level: 1,
      groupId: 100,
      label: 'QC1',
      title: 'Qualidade do Código - Inicial',
      details: '- Ausência de padrões de codificação.  \n- Qualidade depende de cada desenvolvedor.',
    },
    {
      id: 102,
      level: 2,
      groupId: 100,
      label: 'QC2',
      title: 'Qualidade do Código - Consciente',
      details: '- Busca pela redução do tempo de ciclo e retrabalhos.  \n- Ações iniciais em projetos pilotos, com ferramentas de automação.  \n- Aproximação entre desenvolvimento, qualidade e operações.',
    },
    {
      id: 103,
      level: 3,
      groupId: 100,
      label: 'QC3',
      title: 'Qualidade do Código - Gerenciado',
      details: '- Automação da revisão por pares.  \n- Verificação da qualidade ocorre em ambientes dedicados de integração.  \n- Geração de alertas e defeitos realizados por ferramentas.',
    },
    {
      id: 104,
      level: 4,
      groupId: 100,
      label: 'QC4',
      title: 'Qualidade do Código - Avançado',
      details: '- Qualidade incorpora atributos de qualidade tais como performance, segurança e usabilidade.  \n- Verificação da qualidade opera consistentemente em base diária por automações.',
    },
    {
      id: 105,
      level: 5,
      groupId: 100,
      label: 'QC5',
      title: 'Qualidade do Código - Melhoria contínua',
      details: '- Verificação da qualidade é disparada no momento dos _commits_.  \n- Defeitos e não conformidades são resolvidos em base diária.  \n-_Dashboards_ de qualidade de código compartilhados publicamente.',
    },
    {
      id: 201,
      level: 1,
      groupId: 200,
      label: 'CC1',
      title: 'Configuração como Código - Inicial',
      details: '- Trabalhos de configuração de ambientes, dados de testes, parâmetros e senhas são manuais.  \n- Cultura de _scripts_ ainda não foi estabelecidada.',
    },
    {
      id: 202,
      level: 2,
      groupId: 200,
      label: 'CC2',
      title: 'Configuração como Código - Consciente',
      details: '- _Scripts_ de automação começam a ser criados.  \n- Compartilhamento de _scripts_ entre times de desenvolvimento, qualidade e operações.',
    },
    {
      id: 203,
      level: 3,
      groupId: 200,
      label: 'CC3',
      title: 'Configuração como Código - Gerenciado',
      details: '- _Scripts_ para a maior parte dos trabalhos repetitivos.  \n- Repositórios de _scripts_ bem estabelecidos.  \n- Intenso compartilhamento de _scripts_ entre times.',
    },
    {
      id: 204,
      level: 4,
      groupId: 200,
      label: 'CC4',
      title: 'Configuração como Código - Avançado',
      details: '- _Scripts_ para provisionamento de máquinas virtuais começam a ser desenvolvidos.  \n- Infraestrutura como código (IaC) aproxima o trabalho dos times de desenvolvimento e operações.',
    },
    {
      id: 205,
      level: 5,
      groupId: 200,
      label: 'CC5',
      title: 'Configuração como Código - Melhoria Contínua',
      details: '- Infraestrutura como código (IaC) é prática comum.  \n- Sem fricção no provisionamento e configuração de ambientes.  \n- Sinergia entre desenvolvimento e operações.',
    },
    {
      id: 301,
      level: 1,
      groupId: 300,
      label: 'GB1',
      title: 'Gestão de Builds - Inicial',
      details: '- _Builds_ são montados nas próprias IDEs.  \n- Automação de _builds_ ainda é precária.  \n- Uso inicial de ferramentas de linhas de comando de _builds_.',
    },
    {
      id: 302,
      level: 2,
      groupId: 300,
      label: 'GB2',
      title: 'Gestão de Builds - Consciente',
      details: '- _Builds_ são realizados em ambientes dedicados, com gestão centralizada de dependências e compilação do código fonte.  \n- _Builds_ ocorrem de forma automatizada em base diária.',
    },
    {
      id: 303,
      level: 3,
      groupId: 300,
      label: 'GB3',
      title: 'Gestão de Builds - Gerenciado',
      details: '- _Builds_ incorporam alguns processos tais como automação de testes, configuração de ambientes, qualidade de código, geração de _tags_ e documentação técnica.  \n- _Builds_ geram defeitos para desenvolvedores e qualidade.',
    },
    {
      id: 304,
      level: 4,
      groupId: 300,
      label: 'GB4',
      title: 'Gestão de Builds - Avançado',
      details: '- _Builds_ incorporam obrigatoriamente automação de testes, configuração de ambiente, qualidade de código, geração de _tags_ e documentação técnica, entre outros.  \n- Primeiros experimentos de integração contínua (CI) começam.',
    },
    {
      id: 305,
      level: 5,
      groupId: 300,
      label: 'GB5',
      title: 'Gestão de Builds - Melhoria Contínua',
      details: '- *Integração contínua* (CI) é prática comum.  \n- Defeitos e não conformidades são expostos em base contínua pelos _builds_ e resolvidos em base diária pelos times de desenvolvimento.',
    },
    {
      id: 401,
      level: 1,
      groupId: 400,
      label: 'GR1',
      title: 'Gestão de Releases - Inicial',
      details: '- _Builds_ são copiados de forma manual entre ambientes de desenvolvimento, homologação e produção.  \n- Parâmetros nos ambientes são configurados manualmente.',
    },
    {
      id: 402,
      level: 2,
      groupId: 400,
      label: 'GR2',
      title: 'Gestão de Releases - Consciente',
      details: '- Automação das cópias dos _builds_ entre ambientes.  \n- Parâmetros nos ambientes configurados por _scripts_ automatizados.',
    },
    {
      id: 403,
      level: 3,
      groupId: 400,
      label: 'GR3',
      title: 'Gestão de Releases - Gerenciado',
      details: '- Implantação em homologação ocorre sempre que um _build_ é gerando - *Implantação Contínua*.  \n- Automação dos fluxos de aprovação entre ambientes de desenvolvimento, homologação e produção.',
    },
    {
      id: 404,
      level: 4,
      groupId: 400,
      label: 'GR4',
      title: 'Gestão de Releases - Avançado',
      details: '- Provisionamento começa a ocorrer com micro-containeres.  \n- Implantação automatizada incorpora o provisionamento de ambientes com uso de conteinerização.',
    },
    {
      id: 405,
      level: 5,
      groupId: 400,
      label: 'GR5',
      title: 'Gestão de Releases - Melhoria Contínua',
      details: '- Implantação em produção ocorre sempre que um _build_ é gerado no ambiente de homologação - *Entrega Contínua*.  \n- Provisionamento completamente virtualizado.  \n- Automação da implantação incorpora Infraestrutura coom código (IaC).',
    },
    {
      id: 501,
      level: 1,
      groupId: 500,
      label: 'GT1',
      title: 'Gestão de Testes - Inicial',
      details: '- Sem cultura de testes.  \n- Testes são executados de forma exploratória.  \n- Defeitos se acumulam nas fases finais dos projetos.',
    },
    {
      id: 502,
      level: 2,
      groupId: 500,
      label: 'GT2',
      title: 'Gestão de Testes - Consciente',
      details: '- Testes funcionais bem estabelecidos.  \n- Testes de unidade são introduzidos para regras de negócio complexas.  \n- Automação de testes começa a ser experimentada em projetos pilotos.',
    },
    {
      id: 503,
      level: 3,
      groupId: 500,
      label: 'GT3',
      title: 'Gestão de Testes - Gerenciado',
      details: '- Automação de testes ocorre para testes funcionais e testes de unidade.  \n- Cobertura automatizada do código é monitorada.  \n- Automação de testes é incorporada aos processos de _build_.',
    },
    {
      id: 504,
      level: 4,
      groupId: 500,
      label: 'GT4',
      title: 'Gestão de Testes - Avançado',
      details: '- Automação de testes incorpora aspectos não-funcionais como segurança e usabilidade.  \n- Processos de _build_ possuem suítes de automação de testes robustas e com excelente cobertura de código.  \n- Exposição e resolução de defeitos ocorre de forma continuada.',
    },
    {
      id: 505,
      level: 5,
      groupId: 500,
      label: 'GT5',
      title: 'Gestão de Testes - Melhoria Contínua',
      details: '- Testes de sanidade ocorrem em ambientes de produção.  \n- Práticas de injeção de falhas são experimentadas.  \n- Testes canários são incoporados nas _releases_.',
    },
    {
      id: 601,
      level: 1,
      groupId: 600,
      label: 'GCF1',
      title: 'Gestão de Configuração - Inicial',
      details: '- Ausência de configuração de código e ambiente.  \n- Códigos fonte e outros artefatos são armazenados em sistemas de arquivos.  \n- Sem ferramentas de SCM.',
    },
    {
      id: 602,
      level: 2,
      groupId: 600,
      label: 'GCF2',
      title: 'Gestão de Configuração - Consciente',
      details: '- Ferramentas de gestão de configuração de código (SCM) implementadas.  \n- Controle automatizado de versionamento de código.  \n- _Labels_ começam a ser usados para marcar versões.',
    },
    {
      id: 603,
      level: 3,
      groupId: 600,
      label: 'GCF3',
      title: 'Gestão de Configuração - Gerenciado',
      details: '- Gestão da configuração começa a incorporar binários e _scripts_ de automação de tarefas.  \n- Políticas de SCM estabelecidas.  \n- Automação das políticas de SCM começam a ser experimentadas.',
    },
    {
      id: 604,
      level: 4,
      groupId: 600,
      label: 'GCF4',
      title: 'Gestão de Configuração - Avançado',
      details: '- Maior parte dos binários de componentes e bibliotecas fazem parte da gestão de configuração.  \n- Políticas de SCM incorporam barreiras sólidas de qualidade.  \n- Políticas de SCM plenamente automatizadas.',
    },
    {
      id: 605,
      level: 5,
      groupId: 600,
      label: 'GCF5',
      title: 'Gestão de Configuração - Melhoria Contínua',
      details: '- Todos os binários de componentes e bibliotecas fazem parte da gestão de configuração.  \n- Gestão da configuração incorpora ambientes virtualizados e trata a infraestrutura como código (IaC).  \n- Ambientes _self-services_ são estabelecidos.',
    },
    {
      id: 701,
      level: 1,
      groupId: 700,
      label: 'TC1',
      title: 'Testes de Carga - Inicial',
      details: '- Testes de carga não são executados pelos times desenvolvimento, qualidade e operações.  \n- Problemas com tempos de resposta e indisponibilidade em produção.',
    },
    {
      id: 702,
      level: 2,
      groupId: 700,
      label: 'TC2',
      title: 'Testes de Carga - Consciente',
      details: '- Testes de carga são introduzidos no processo de desenvolvimento.  \n- Automação dos testes de carga começa a ser experimentada.',
    },
    {
      id: 703,
      level: 3,
      groupId: 700,
      label: 'TC3',
      title: 'Testes de Carga - Gerenciado',
      details: '- Variações dos testes de carga como testes de performance, estresse e testes de maturidade começam a ser adotadas.  \n- Problemas de indisponibilidade reduzidos em produção.',
    },
    {
      id: 704,
      level: 4,
      groupId: 700,
      label: 'TC4',
      title: 'Testes de Carga - Avançado',
      details: '- Testes de carga, estresse e maturidade incorporados aos processos de _builds_ e _releases_.  \n- Planejamento de capacidade fornece diretrizes de provisionamento de ambiente em produção.',
    },
    {
      id: 705,
      level: 5,
      groupId: 700,
      label: 'TC5',
      title: 'Testes de Carga - Melhoria Contínua',
      details: '- Testes de carga fornecem políticas automatizadas de infraestrutura de código para responder a picos de utilização em ambientes de produção.  \n- Problemas de indisponibilidade são raros em produção.',
    },
  ],
  edges: [
    { id: 1, from: 101, to: 102 },
    { id: 2, from: 102, to: 103 },
    { id: 3, from: 103, to: 104 },
    { id: 4, from: 104, to: 105 },
    { id: 5, from: 201, to: 202 },
    { id: 6, from: 202, to: 203 },
    { id: 7, from: 203, to: 204 },
    { id: 8, from: 102, to: 204 },
    { id: 9, from: 204, to: 205 },
    { id: 10, from: 102, to: 203 },
    { id: 11, from: 301, to: 202 },
    { id: 12, from: 301, to: 302 },
    { id: 13, from: 302, to: 104 },
    { id: 14, from: 302, to: 303 },
    { id: 15, from: 104, to: 303 },
    { id: 16, from: 303, to: 304 },
    { id: 17, from: 304, to: 305 },
    { id: 18, from: 401, to: 402 },
    { id: 19, from: 202, to: 402 },
    { id: 20, from: 402, to: 403 },
    { id: 21, from: 403, to: 404 },
    { id: 22, from: 204, to: 404 },
    { id: 23, from: 404, to: 405 },
    { id: 24, from: 205, to: 405 },
    { id: 25, from: 501, to: 502 },
    { id: 26, from: 502, to: 503 },
    { id: 27, from: 302, to: 503 },
    { id: 28, from: 502, to: 303 },
    { id: 29, from: 503, to: 504 },
    { id: 30, from: 504, to: 505 },
    { id: 31, from: 405, to: 505 },
    { id: 32, from: 601, to: 602 },
    { id: 33, from: 602, to: 303 },
    { id: 34, from: 602, to: 603 },
    { id: 35, from: 203, to: 603 },
    { id: 36, from: 603, to: 403 },
    { id: 37, from: 603, to: 604 },
    { id: 38, from: 304, to: 604 },
    { id: 39, from: 604, to: 605 },
    { id: 40, from: 405, to: 605 },
    { id: 41, from: 701, to: 702 },
    { id: 42, from: 202, to: 702 },
    { id: 43, from: 702, to: 104 },
    { id: 44, from: 503, to: 702 },
    { id: 45, from: 702, to: 703 },
    { id: 46, from: 703, to: 704 },
    { id: 47, from: 304, to: 704 },
    { id: 48, from: 704, to: 705 },
    { id: 49, from: 605, to: 705 },
  ],
};

export default devOpsGraph;
